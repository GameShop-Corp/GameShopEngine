/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package GameShopEngine;

//import GameShopEngine.LanguageProcessor.GameShopLanguageProcessor;

import org.joml.RayAabIntersection;

import GameShopEngine.PolyHash.GameShopObjectHash;
import GameShopEngine.PolyHash.GameShopPolyLineHash;
import GameShopEngine.PolyHash.GameShopPolyMeshHash;
import GameShopEngine.PolyHash.GameShopPolySurfaceHash;
import GameShopEngine.UI.GameShopFirstGlyph;
import org.lwjgl.nanovg.*;
//import GameShopEngine.UI.Characters.GameShopCharacter;
//import GameShopEngine.UI.Characters.GameShopCharacterCursor;
//import GameShopEngine.UI.Characters.GameShopCharacterFontHash;
//import GameShopEngine.UI.Components.GameShopUIComponent;
//import GameShopEngine.UI.GameShopUI;
//import com.jme3.app.Application;
import com.jme3.math.FastMath;
import java.io.IOException;
//import de.lessvoid.nifty.Nifty;
//import GameShopEngine.UI.Characters.AlphaNumeric.GameShopCharacterUpperCaseA;
//import GameShopEngine.UI.Characters.GameShopCharacter;
//import GameShopEngine.UI.Characters.GameShopCharacterCursor;
//import GameShopEngine.UI.Characters.GameShopCharacterFontHash;
//import GameShopEngine.UI.Components.GameShopUIComponent;
//import GameShopEngine.UI.GameShopUI;
//import GameShopEngine.UI.GameShopUIATMS;
//import GameShopEngine.UI.GameShopUIPolyMesh;
//import de.lessvoid.nifty.Nifty;
import org.lwjgl.*;
import org.lwjgl.glfw.*;
import org.lwjgl.opengl.*;
import org.lwjgl.system.*;

import java.nio.*;
import java.util.ArrayList;
import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4f;
import static org.lwjgl.nanovg.NanoVG.nvgCreateFontMem;

import static org.lwjgl.glfw.Callbacks.*;
import static org.lwjgl.glfw.GLFW.*;
//import static org.lwjgl.nanovg.NanoVG.nvgEndFrame;
import static org.lwjgl.nanovg.NanoVG.*;
import static org.lwjgl.nanovg.NanoVGGL3.NVG_ANTIALIAS;
import static org.lwjgl.nanovg.NanoVGGL3.NVG_STENCIL_STROKES;
import static org.lwjgl.nanovg.NanoVGGL3.*;
//import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.opengl.GL46.*;
import static org.lwjgl.system.MemoryStack.*;
import static org.lwjgl.system.MemoryUtil.*;
//import imgui.ImGui;
//import imgui.app.Application;
//import imgui.app.Configuration;
 

public class App {
    
 
    
    GLFWVidMode vidmode;

    // The window handle
	private long window;
        private long nvgContext;
        
boolean windowOpen = true;
 
        
        public final float uiScaleZ = -.97f;
        public final float uiScaleY = .56f;
        
        
//        GameShopRuntime gsr = new GameShopRuntime();
//        GameShopWindow gsw = new GameShopWindow();
        
        //int n = 10000;
        
        //GameShopPoly[] gsps = new GameShopPoly[n];
      //  GameShopPoly gsp;// = //The System Resolution must be set before using.  Preferred 1920 x 1080

//Need Element Arrays To Make Squares.  The Most Fundamental Object
//Will Be A Square Based System.  If you want to make a Triangle
//Conjoin Two Points on a Square.  This is so the Texturing will be Easier
         
 //One day there needs to be a way to account for resizing the screen.  For now its 
 //a fullscreen app.  Look to GameShopCamera for more details
        
        
        
        public boolean moveForward = false;
        public boolean moveBackward = false;
        
        
        public void printEnvironmentVariables(){
            System.out.println("Hello LWJGL " + Version.getVersion() + "!");
            System.out.println(System.getProperty("java.vendor"));
            System.out.println(System.getProperty("java.vendor.url"));
            System.out.println(System.getProperty("java.version"));
            System.out.println(System.getProperty("sun.arch.data.model"));
        }
        
        public void configureOpenGLHints(){
        
            // Configure GLFW
		glfwDefaultWindowHints(); // optional, the current window hints are already the default
		glfwWindowHint(GLFW_VISIBLE, GLFW_TRUE); // the window will stay hidden after creation
		glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE); // the window will be resizable
                glfwWindowHint(GLFW_MAXIMIZED, GLFW_TRUE);
             
        }
        
        public void performKeyMappings(){
        
            // Setup a key callback. It will be called every time a key is pressed, repeated or released.
		glfwSetKeyCallback(window, (window, key, scancode, action, mods) -> {
			if ( key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE )
				glfwSetWindowShouldClose(window, true); // We will detect this in the rendering loop
                        //    windowOpen = false;
                        
                        if (key == GLFW_KEY_W && action == GLFW_PRESS)
                            moveForward = true;
                        
                          if (key == GLFW_KEY_S && action == GLFW_PRESS)
                            moveBackward = true;
		});   

               
                // Get the resolution of the primary monitor	
//                GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());
////new GameShopPoly( new Vector3f(-1f, -uiScaleY, uiScaleZ), new Vector3f(-1f,uiScaleY,uiScaleZ), new Vector3f(1f,uiScaleY,uiScaleZ), new Vector3f(1f,-uiScaleY,uiScaleZ));
//
//                System.out.println("vidmode: " + vidmode.width() + " " + vidmode.height());
                GameShopCursor.getInstance().screenSize.set(vidmode.width(), vidmode.height());
                GameShopCursor.getInstance().vidModeSize.set(vidmode.width(), vidmode.height());
                glfwSetCursorPosCallback(window, (window, xPos, yPos) -> {
                
                    //do click boolean to optimize this for once click
                   // if (GameShopCursor.getInstance().clicked){
                    
                   // GameShopCursor.getInstance().clicked = false;
                    GameShopCursor.getInstance().cursorPosition.set(xPos, yPos);
                    GameShopCursor.getInstance().convertToGLPosition();
                   // GameShopCursor.getInstance().clicked = false;
                    //}
                });
                
                glfwSetMouseButtonCallback(window, (window, button, action, mods) -> {
                
                    if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_PRESS){
                
                    
                        GameShopCursor.getInstance().clicked = true;
                        System.out.println(GameShopCursor.getInstance().cursorPosition);
               
                    } 
//                    
                    else if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_RELEASE){
                    
                        GameShopCursor.getInstance().clicked = false;
                    }
                    
                    
        
                });
        }
        
        
	public void run() {
		
                printEnvironmentVariables();
                
		init();
                //initVulkan();
		loop();

		// Free the window callbacks and destroy the window
		glfwFreeCallbacks(window);
		glfwDestroyWindow(window);

		// Terminate GLFW and free the error callback
		glfwTerminate();
		glfwSetErrorCallback(null).free();
	}

	private void init() {
            
            if(glfwPlatformSupported(GLFW_PLATFORM_X11)) glfwInitHint(GLFW_PLATFORM, GLFW_PLATFORM_X11);
		// Setup an error callback. The default implementation
		// will print the error message in System.err.
		GLFWErrorCallback.createPrint(System.err).set();

		// Initialize GLFW. Most GLFW functions will not work before doing this.
		if ( !glfwInit() )
			throw new IllegalStateException("Unable to initialize GLFW");

		configureOpenGLHints();
                
                vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());
 
                System.out.println("vidmode: " + vidmode.width() + " " + vidmode.height());
                
                   
                //I NEED A METHOD TO PERFECTLY MAP KEYS
                //PROBABLY A SINGLETON
                //glfwGetPrimaryMonitor()
		// Create the window
		window = glfwCreateWindow(vidmode.width(), vidmode.height(), "Hello World!", NULL, NULL);
		if ( window == NULL )
			throw new RuntimeException("Failed to create the GLFW window");

		performKeyMappings();
//		// Get the thread stack and push a new frame
//		try ( MemoryStack stack = stackPush() ) {
//			IntBuffer pWidth = stack.mallocInt(1); // int*
//			IntBuffer pHeight = stack.mallocInt(1); // int*
//
//			// Get the window size passed to glfwCreateWindow
//			glfwGetWindowSize(window, pWidth, pHeight);
//
//			
//			// Center the window
//			glfwSetWindowPos(
//				window,
//				(vidmode.width() - pWidth.get(0)) / 2,
//				(vidmode.height() - pHeight.get(0)) / 2
//			);
//		} // the stack frame is popped automatically

		// Make the OpenGL context current
		glfwMakeContextCurrent(window);
                //Nifty nifty = new Nifty(new LwjglRenderDevice(window)); 

		// Enable v-sync
		glfwSwapInterval(1);

		// Make the window visible
		glfwShowWindow(window);
	}

        public String vertexShader = "#version 330\n" +
"\n" +
                "#extension GL_ARB_explicit_uniform_location : require\n"+
"layout (location=0) in vec3 inputPosition;\n" +
"layout (location=1) uniform mat4 projMatrix;\n" +
"layout (location=3) uniform mat4 modelMatrix;\n" +
"layout (location=4) uniform mat4 viewMatrix;\n" +
 "layout (location=2) in vec2 texCoord;\n" +
                "out vec2 outTextCoord;\n" +
"\n" +
"void main()\n" +
"{\n" +
"    gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(inputPosition, 1.0);\n" +
 
//"    gl_Position = projMatrix * viewMatrix  * vec4(inputPosition, 1.0);\n" +
                "   outTextCoord = texCoord;\n" +
"}";
        public String fragmentShader = "#version 330\n" +
"\n" +
"out vec4 fragColor;\n" +
                "in vec2 outTextCoord;\n" +
                "uniform sampler2D txtSampler;\n"+
"\n" +
"void main()\n" +
"{\n" +
"    fragColor = texture(txtSampler, outTextCoord);\n" +
"}";

        
        public String computeShaderPicking = "#version 430 core\n"
                + "\n"
                + "// Bindings for SSBOs and image output\n"
                + "layout(std430, binding = 0) buffer ObjectBuffer {\n"
                + "    ObjectData objects[];\n"
                + "};\n"
                + "\n"
                + "layout(std430, binding = 1) buffer ResultBuffer {\n"
                + "    uint objectId;\n"
                + "    float depth;\n"
                + "};\n"
                + "\n"
                + "// Mouse coordinates are passed as uniforms\n"
                + "uniform vec2 mouseCoords;\n"
                + "uniform vec2 windowSize;\n"
                + "\n"
                + "// Camera matrices for ray generation\n"
                + "uniform mat4 inverseViewProjectionMatrix;\n"
                + "\n"
                + "layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;\n"
                + "\n"
                + "void main() {\n"
                + "    // Generate a ray from the camera through the mouse coordinates\n"
                + "    vec2 ndc = (mouseCoords / windowSize) * 2.0 - 1.0;\n"
                + "    vec4 rayStart_clip = vec4(ndc.x, ndc.y, -1.0, 1.0);\n"
                + "    vec4 rayEnd_clip = vec4(ndc.x, ndc.y, 1.0, 1.0);\n"
                + "\n"
                + "    vec4 rayStart_world = inverseViewProjectionMatrix * rayStart_clip;\n"
                + "    rayStart_world /= rayStart_world.w;\n"
                + "\n"
                + "    vec4 rayEnd_world = inverseViewProjectionMatrix * rayEnd_clip;\n"
                + "    rayEnd_world /= rayEnd_world.w;\n"
                + "\n"
                + "    vec3 rayDir_world = normalize(rayEnd_world.xyz - rayStart_world.xyz);\n"
                + "\n"
                + "    uint hitId = 0;\n"
                + "    float minDepth = 1e30; // A very large number\n"
                + "\n"
                + "    // Iterate over all objects to test for intersection\n"
                + "    for (int i = 0; i < objects.length(); ++i) {\n"
                + "        // Perform ray-AABB intersection test\n"
                + "        float t0 = 0.0, t1 = 0.0;\n"
                + "        bool intersection = intersectRayAABB(rayStart_world.xyz, rayDir_world, objects[i].minBounds, objects[i].maxBounds, t0, t1);\n"
                + "\n"
                + "        if (intersection && t0 > 0.0 && t0 < minDepth) {\n"
                + "            hitId = objects[i].objectId;\n"
                + "            minDepth = t0;\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    // Write the result to the output buffer\n"
                + "    objectId = hitId;\n"
                + "    depth = minDepth;\n"
                + "}\n"
                + "\n"
                + "// Ray-AABB intersection function (can be optimized)\n"
                + "bool intersectRayAABB(vec3 rayOrigin, vec3 rayDirection, vec3 minBounds, vec3 maxBounds, out float t0, out float t1) {\n"
                + "    vec3 invDir = 1.0 / rayDirection;\n"
                + "    vec3 t_min = (minBounds - rayOrigin) * invDir;\n"
                + "    vec3 t_max = (maxBounds - rayOrigin) * invDir;\n"
                + "    vec3 t_near = min(t_min, t_max);\n"
                + "    vec3 t_far = max(t_min, t_max);\n"
                + "\n"
                + "    t0 = max(max(t_near.x, t_near.y), t_near.z);\n"
                + "    t1 = min(min(t_far.x, t_far.y), t_far.z);\n"
                + "\n"
                + "    return t0 <= t1;\n"
                + "}";
        GameShopObject gso;
        Vector3f position = new Vector3f(0,0, 0);
        
//        GameShopUI gsui;
        
        public void createShaders(){
        
             GameShopShaderHash.getInstance().addShader("Hello GameShop", vertexShader, fragmentShader);
             GameShopShaderHash.getInstance().compileShader("Hello GameShop");

        }
        
        public void allocateShaderValues(){
        
                 GameShopCameraHub.getInstance().gsCameras.put("UI", new GameShopCamera(position, new Vector3f(), (int)GameShopCursor.getInstance().vidModeSize.x, (int)GameShopCursor.getInstance().vidModeSize.y));
              
                GameShopUniformHub.getInstance().gsUniforms.add(new GameShopUniform(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")));
               
//                GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).createUniform("projectionMatrix");
//               
                System.out.println("vShader: " + GameShopShaderHash.getInstance().getVertexShader("Hello GameShop"));
               //System.out.println(glGetShaderInfoLog(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")));
         GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).createUniform("projMatrix");
         GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).createUniform("modelMatrix");
         GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).createUniform("viewMatrix");

         GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).createUniform("txtSampler");

         System.out.println("fShader: " + GameShopShaderHash.getInstance().getFragmentShader("Hello GameShop"));
    //    throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    
        }
        
        public void initGLEnable(){
        
            glEnable(GL_BLEND);
 
            glEnable(GL_DEPTH_TEST);
            
        }
        
        public void useShaderValues(){
        
            glUseProgram(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop"));
         GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).setUniform("projMatrix", GameShopCameraHub.getInstance().gsCameras.get("UI").projMatrix);
                  GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).setUniform("modelMatrix", GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").getModelMatrix());
             GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).setUniform("viewMatrix", GameShopCameraHub.getInstance().gsCameras.get("UI").getViewMatrix());
         GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).setUniform("txtSampler", 0);
 
        }
        
        public void updateMovement(){
        
              if (moveForward){
                     //GameShopCameraHub.getInstance().gsCameras.get("UI").position = new Vector3f(      GameShopCameraHub.getInstance().gsCameras.get("UI").position.add(0,0,-.1f));
                     //GameShopCameraHub.getInstance().gsCameras.get("UI").updateProjMatrix(1920, 1080);//.../.position = new Vector3f(      GameShopCameraHub.getInstance().gsCameras.get("UI").position.add(0,0,-.1f));
                     position = position.add(0, 0, -0.1f);
                        GameShopCameraHub.getInstance().gsCameras.put("UI", new GameShopCamera(position, new Vector3f(), (int)GameShopCursor.getInstance().vidModeSize.x , (int)GameShopCursor.getInstance().vidModeSize.y));
                  
                     moveForward = false;
                     moveBackward = false;
                     System.out.println("FORWARD");
                    } else if (moveBackward){
                    //GameShopCameraHub.getInstance().gsCameras.get("UI").position = new Vector3f(      GameShopCameraHub.getInstance().gsCameras.get("UI").position.add(0,0,.1f));
                     //                  GameShopCameraHub.getInstance().gsCameras.get("UI").updateProjMatrix(1920, 1080); 
                     position = position.add(0, 0, 0.1f);
                        GameShopCameraHub.getInstance().gsCameras.put("UI", new GameShopCamera(position, new Vector3f(), (int)GameShopCursor.getInstance().vidModeSize.x , (int)GameShopCursor.getInstance().vidModeSize.y));// new GameShopCamera(position, new Vector3f(), 1920, 1080));
                               System.out.println("BACKWARD");
                               System.out.println(position);
                     moveForward = false;
                     moveBackward = false;
                    }
                    if (GameShopCursor.getInstance().clicked){
                    System.out.println("Cursor:" + GameShopCursor.getInstance().cursorPosition);
                    System.out.println("GL Position: " + GameShopCursor.getInstance().glPosition);
                    GameShopCursor.getInstance().clicked = false;
                    }
        }
        
        
        public void createPolyHashes(){
        
            //GameShopObjectHash.getInstance().addGameShopObject("UI", new GameShopObject);
            
            GameShopPolyLineHash.getInstance().addGameShopPolyLine("UI-Line-1", new GameShopPolyLine(new com.jme3.math.Vector3f[]{
            
                new com.jme3.math.Vector3f(-1, -1, 0),
                new com.jme3.math.Vector3f(-.33f, -1, 0),
                new com.jme3.math.Vector3f(.33f, -1, 0),
                new com.jme3.math.Vector3f(1, -1 , 0)
                    
            }, 2));
            
            GameShopPolyLineHash.getInstance().addGameShopPolyLine("UI-Line-2", new GameShopPolyLine(new com.jme3.math.Vector3f[]{
                new com.jme3.math.Vector3f(-1, -.33f, 0),
                new com.jme3.math.Vector3f(-.33f, -.33f, 0),
                new com.jme3.math.Vector3f(.33f, -.33f, 0),
                new com.jme3.math.Vector3f(1, -.33f, 0)

            }, 2));
            
            GameShopPolyLineHash.getInstance().addGameShopPolyLine("UI-Line-3", new GameShopPolyLine(new com.jme3.math.Vector3f[]{
                new com.jme3.math.Vector3f(-1, .33f, 0),
                new com.jme3.math.Vector3f(-.33f, .33f, 0),
                new com.jme3.math.Vector3f(.33f, .33f, 0),
                new com.jme3.math.Vector3f(1, .33f, 0)

            }, 2));
            
            GameShopPolyLineHash.getInstance().addGameShopPolyLine("UI-Line-4", new GameShopPolyLine(new com.jme3.math.Vector3f[]{
                new com.jme3.math.Vector3f(-1, 1, 0),
                new com.jme3.math.Vector3f(-.33f, 1, 0),
                new com.jme3.math.Vector3f(.33f, 1, 0),
                new com.jme3.math.Vector3f(1, 1, 0)

            }, 2));
            
            GameShopPolySurfaceHash.getInstance().addGameShopPolySurface("UI-Surface-1", new GameShopPolySurface(new GameShopPolyLine[]{
            
               GameShopPolyLineHash.getInstance().polyLineHash.get("UI-Line-1"),
               GameShopPolyLineHash.getInstance().polyLineHash.get("UI-Line-2"),
               GameShopPolyLineHash.getInstance().polyLineHash.get("UI-Line-3"),
               GameShopPolyLineHash.getInstance().polyLineHash.get("UI-Line-4")
                
            }));
            
            GameShopATMS atms = new GameShopATMS("UI", 256, 256, new com.jme3.math.Vector4f[]{new com.jme3.math.Vector4f(0, 1, 0, 1)});
            atms.makeATMS();
//GameShopATMSHash.getInstance().addATMS("UI", atms);
            GameShopATMSHash.getInstance().dictionary.get("UI").layer.drawCircle(128, 128, 256,  new Vector4f(127f,127f,127f,127f));
            GameShopPolyMeshHash.getInstance().addGameShopPolyMesh("UI-Mesh-1", new GameShopPolyMesh( new GameShopPolySurface[]{GameShopPolySurfaceHash.getInstance().polySurfaceHash.get("UI-Surface-1")}, GameShopATMSHash.getInstance().dictionary.get("UI")));
            
            GameShopObjectHash.getInstance().addGameShopObject("UI-Object-1", new GameShopObject(GameShopPolyMeshHash.getInstance().polyMeshHash.get("UI-Mesh-1")));
        
             GameShopFirstGlyph gsf = new GameShopFirstGlyph('A', 256, 256);
             gsf.draw();
             
             GameShopATMSHash.getInstance().dictionary.get("UI").layer.copyLayer(gsf.layer);// .drawCircle(128, 128, 256,  new Vector4f(127f,127f,127f,127f));
            
        }
        
        
	private void loop() {
            
            
            // This line is critical for LWJGL's interoperation with GLFW's
		// OpenGL context, or any context that is managed externally.
		// LWJGL detects the context that is current in the current thread,
		// creates the GLCapabilities instance and makes the OpenGL
		// bindings available for use.
		GL.createCapabilities();
                
                nvgContext = nvgCreate(NVG_ANTIALIAS | NVG_STENCIL_STROKES); // Use NVG_ANTIALIAS for smoother lines
        
                if (nvgContext == NULL) {
            
                    throw new RuntimeException("Failed to create NanoVG context");
       
                }
                
                //
                glfwWindowHint(GLFW_OPENGL_DEBUG_CONTEXT, GL_TRUE); // before creating the window
                GLUtil.setupDebugMessageCallback();
               
		// Set the clear color
		glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
                
 
               initGLEnable();
               
               createShaders();
                 
               
               createPolyHashes();
               /*
                GameShopPolyLine[] gspl = new GameShopPolyLine[4];
                GameShopPolyLine[] gspl1 = new GameShopPolyLine[4];
                
                GameShopPolyLine[] uiLines = new GameShopPolyLine[4];
                
                
                int numPoints = 4;
                float zAxis = 0;//-4.6f; //-1.6
                float zAxis1 = -1.6f;
                float xAxis = 1.65f;
                
                 uiLines[0] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{ 
                    new com.jme3.math.Vector3f(-xAxis * 1,-1,zAxis),
                    new com.jme3.math.Vector3f(-xAxis * .33f, -1, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * -.33f, -1, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * -1, -1, zAxis)}, numPoints);
                
                uiLines[1] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{ 
                    new com.jme3.math.Vector3f(-xAxis * 1,-.33f,zAxis),
                    new com.jme3.math.Vector3f(-xAxis * .33f, -.33f, zAxis ),
                    new com.jme3.math.Vector3f(-xAxis * -.33f, -.33f, zAxis ),
                    new com.jme3.math.Vector3f(-xAxis * -1, -.33f, zAxis)}, numPoints);
                
                uiLines[2] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{ 
                    new com.jme3.math.Vector3f(-xAxis * 1,.33f,zAxis),
                    new com.jme3.math.Vector3f(-xAxis * .33f, .33f, zAxis ),
                    new com.jme3.math.Vector3f(-xAxis * -.33f, .33f, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * -1, .33f, zAxis)}, numPoints);
                
                uiLines[3] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{ 
                    new com.jme3.math.Vector3f(-xAxis * 1,1,zAxis),
                    new com.jme3.math.Vector3f(-xAxis * .33f, 1, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * -.33f, 1, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * -1, 1, zAxis)}, numPoints);
                
                
                gspl[0] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{ 
                    new com.jme3.math.Vector3f(-xAxis * 0,0,zAxis),
                    new com.jme3.math.Vector3f(-xAxis * .33f, 0, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * .66f, 0, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * 1, 0, zAxis)}, numPoints);
                
                gspl[1] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{ 
                    new com.jme3.math.Vector3f(-xAxis * 0,.33f,zAxis),
                    new com.jme3.math.Vector3f(-xAxis * .33f, .33f, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * .66f, .33f, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * 1, .33f, zAxis)}, numPoints);
                
                gspl[2] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{ 
                    new com.jme3.math.Vector3f(-xAxis * 0,.66f,zAxis),
                    new com.jme3.math.Vector3f(-xAxis * .33f, .66f, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * .66f, .66f, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * 1, .66f, zAxis)}, numPoints);
                
                gspl[3] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{ 
                    new com.jme3.math.Vector3f(-xAxis * 0,1,zAxis),
                    new com.jme3.math.Vector3f(-xAxis * .33f, 1, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * .66f, 1, zAxis),
                    new com.jme3.math.Vector3f(-xAxis * 1, 1, zAxis)}, numPoints);
                
               
                gspl1[0] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{ 
                    new com.jme3.math.Vector3f(0,0,zAxis1),
                    new com.jme3.math.Vector3f(.33f, 0, zAxis1),
                    new com.jme3.math.Vector3f(.66f, 0, zAxis1),
                    new com.jme3.math.Vector3f(1, 0, zAxis1)}, numPoints);
                
                gspl1[1] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{ 
                    new com.jme3.math.Vector3f(0,.33f,zAxis1),
                    new com.jme3.math.Vector3f(.33f, .33f, zAxis1),
                    new com.jme3.math.Vector3f(.66f, .33f, zAxis1),
                    new com.jme3.math.Vector3f(1, .33f, zAxis1)}, numPoints);
                
                gspl1[2] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{ 
                    new com.jme3.math.Vector3f(0,.66f,zAxis1),
                    new com.jme3.math.Vector3f(.33f, .66f, zAxis1),
                    new com.jme3.math.Vector3f(.66f, .66f, zAxis1),
                    new com.jme3.math.Vector3f(1, .66f, zAxis1)}, numPoints);
                
                gspl1[3] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{ 
                    new com.jme3.math.Vector3f(0,1,zAxis1),
                    new com.jme3.math.Vector3f(.33f, 1, zAxis1),
                    new com.jme3.math.Vector3f(.66f, 1, zAxis1),
                    new com.jme3.math.Vector3f(1, 1, zAxis1)}, numPoints);
                
                
                
                GameShopPolySurface uiSurface = new GameShopPolySurface(uiLines);
                GameShopPolySurface gsps = new GameShopPolySurface(gspl);
                GameShopPolySurface gsps1 = new GameShopPolySurface(gspl1);
                
                GameShopUIATMS uiATMS = new GameShopUIATMS(1366, 768, new com.jme3.math.Vector4f[]{new com.jme3.math.Vector4f(0, 1, 0, 1)});
                uiATMS.uiLayer.drawCircle(683, 384, 800, new Vector4f(0,0,127,127));
                uiATMS.makeATMS();
                
                GameShopUIPolyMesh uiGSPMesh = new GameShopUIPolyMesh(new GameShopPolySurface[]{uiSurface}, uiATMS);
                */
            
                /*
                GameShopATMS atms = new GameShopATMS(128, 128, new com.jme3.math.Vector4f[]{new com.jme3.math.Vector4f(0, 1, 0, 1)});
//                atms.layer.drawCircle(50, 50, 100, new Vector4f(0,0,0,1f));
               
                atms.layer.drawCircle(64, 64, 32, new Vector4f(0,0, 127,127));
                atms.makeATMS();
                
                GameShopPolyMesh gspm = new GameShopPolyMesh(new GameShopPolySurface[]{uiSurface}, atms);
            
                GameShopATMS atms1 = new GameShopATMS(128, 128, new com.jme3.math.Vector4f[]{new com.jme3.math.Vector4f(0, 1, 0, 1)});
//                atms.layer.drawCircle(50, 50, 100, new Vector4f(0,0,0,1f));
               
                atms1.layer.drawCircle(64, 64, 128, new Vector4f(0,0,0,1f));
                atms1.makeATMS();
              
                uiGSPMesh.allocateBuffer();
                
                */
              
                for (GameShopPolyMesh gspm: GameShopPolyMeshHash.getInstance().polyMeshHash.values()){
                    gspm.allocateBuffer();
                  
                    System.out.println("UNIQUE ID " + gspm.atms.name);
                  
                }
                allocateShaderValues();
           
                GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").setPosition(0, 0, -1.75f);
            
                //GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").setRotation(0, 1 , .5f, FastMath.DEG_TO_RAD * 60f);
                //GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").rotate(FastMath.DEG_TO_RAD * 0f, FastMath.DEG_TO_RAD * 0f, FastMath.DEG_TO_RAD * 45f);
                
               // GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").setPosition(.5f, 0, -1.75f);
            
                GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").updateModelMatrix();
                
                System.out.println(GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").rotation);
               // this.gsui = new GameShopUI();

//gsui.setPosition(0, 0, -1.75f);
   
                //gsui.updateModelMatrix();

               // GameShopNuklear gsn = new GameShopNuklear((int) window);
               
                 // Nifty setup
        
                
        // Run the rendering loop until the user has attempted to close
		// the window or has pressed the ESCAPE key.
		while ( !glfwWindowShouldClose(window) ) {
             
                  updateMovement();
                  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
                  useShaderValues();
                  GL46.glBlendFunc(GL46.GL_SRC_ALPHA, GL46.GL_ONE_MINUS_SRC_ALPHA);

      
        
                 glEnable(GL_CULL_FACE);
                 glCullFace(GL_FRONT);
                 //gsui.uiPolyMesh.draw();

//                if (GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").rotation.z > FastMath.DEG_TO_RAD * 360f){
//                
//                    GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").rotation.z = FastMath.DEG_TO_RAD * 0f;
//                    
//                }
//                System.out.println(    GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").rotation.z * FastMath.RAD_TO_DEG);
//                GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").rotate(FastMath.DEG_TO_RAD * 0f, FastMath.DEG_TO_RAD * 0f, FastMath.DEG_TO_RAD * 1f);
//
//                    // GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").setPosition(.5f, 0, -1.75f);
//                GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").updateModelMatrix();

                
                for (GameShopPolyMesh gspm: GameShopPolyMeshHash.getInstance().polyMeshHash.values()){
                
                    gspm.draw();
                }
                
                /*
                // Java (LWJGL)
// Populate buffer with object data
int id = 0;
 for (GameShopPolyMesh gspm: GameShopPolyMeshHash.getInstance().polyMeshHash.values()){
    for (GameShopPolySurface gsps: gspm.gspSurfaces){     
//        int x = 0;
//        int x1 = 1;
//        int y = 0;
//        int y1 = 1;
        ByteBuffer objectDataBuffer = BufferUtils.createByteBuffer(id * (4 + 12 + 12));
    
        for (int liney = 0; liney < gsps.vInfinitesimals.length - 1; liney++){
            for (int linex = 0; linex < gsps.vInfinitesimals.length - 1; linex++){
        
                objectDataBuffer.putInt(id);
                objectDataBuffer.put(gsps.vInfinitesimals[liney].infinitesimals[linex]);

                id++;
            }
        }
        
        
//        for (MyObject obj : sceneObjects) {
//            objectDataBuffer.putInt(obj.getId());
//            obj.getMinBounds().get(objectDataBuffer);
//            obj.getMaxBounds().get(objectDataBuffer);
//        }
        objectDataBuffer.flip();

        // Create and bind the SSBO
        int ssbo = GL43.glGenBuffers();
        GL43.glBindBuffer(GL43.GL_SHADER_STORAGE_BUFFER, ssbo);
        GL43.glBufferData(GL43.GL_SHADER_STORAGE_BUFFER, objectDataBuffer, GL43.GL_STATIC_READ);
        GL43.glBindBufferBase(GL43.GL_SHADER_STORAGE_BUFFER, 0, ssbo); // Bind to binding point 0
    
        */
    
    //}
 
                
                /*
                       // Start NanoVG frame
            try (MemoryStack stack = MemoryStack.stackPush()) {
                IntBuffer width = stack.mallocInt(1);
                IntBuffer height = stack.mallocInt(1);
                glfwGetFramebufferSize(window, width, height);
                nvgBeginFrame(nvgContext, width.get(0), height.get(0), 1.0f); // Last parameter is device pixel ratio
            }

            
            // Draw a rectangle
            nvgBeginPath(nvgContext);
            nvgRect(nvgContext, 100, 100, 200, 150);
            nvgFillColor(nvgContext, nvgRGBAf(1.0f, 0.0f, 0.0f, 1.0f, NVGColor.malloc()));
            nvgFill(nvgContext);

            // Draw a circle
            nvgBeginPath(nvgContext);
            nvgCircle(nvgContext, 400, 300, 75);
            nvgFillColor(nvgContext, nvgRGBAf(0.0f, 1.0f, 0.0f, 1.0f, NVGColor.malloc()));
            nvgFill(nvgContext);

            // Draw text
            nvgFontSize(nvgContext, 30.0f);
            nvgFontFace(nvgContext, "sans"); // Assuming a font named "sans" is loaded or default is used
            nvgFillColor(nvgContext, nvgRGBAf(1.0f, 1.0f, 1.0f, 1.0f, NVGColor.malloc()));
            nvgText(nvgContext, 50, 50, "Hello NanoVG!");

            // End NanoVG frame
            nvgEndFrame(nvgContext);
            
            */
                //gsn.runLoop();
                 glfwSwapBuffers(window); // swap the color buffers

			
                // Poll for window events. The key callback above will only be
                // invoked during this call.
		glfwPollEvents();
               
		}
    
      
                reportMemory();
                free();
	}

        
        /*
        
        private static final String FONT_NAME = "OpenSans"; // A name to reference the font
    private static ByteBuffer fontBuffer; // Must be kept in memory

    public static void loadFont(long vgContext) throws IOException {
        // Load the font file into a ByteBuffer
        // Replace "/fonts/OpenSans-Bold.ttf" with the actual path to your font file
        fontBuffer = loadResourceToByteBuffer("/fonts/OpenSans-Bold.ttf", 150 * 1024);

        // Create the font in NanoVG using the loaded ByteBuffer
        int fontId = org.lwjgl.nanovg.NanoVG.nvgCreateFontMem(vgContext, FONT_NAME, fontBuffer, 0);

        if (fontId == -1) {
            throw new RuntimeException("Could not add font: " + FONT_NAME);
        }
        System.out.println("Font '" + FONT_NAME + "' loaded with ID: " + fontId);
    }

    // Helper function to load a resource into a ByteBuffer
    private static ByteBuffer loadResourceToByteBuffer(String resourcePath, int bufferSize) throws IOException {
        ByteBuffer buffer = memAlloc(bufferSize);
        try (java.io.InputStream source = App.class.getResourceAsStream(resourcePath)) {
            if (source == null) {
                throw new IOException("Resource not found: " + resourcePath);
            }
            byte[] data = new byte[1024];
            int read;
            while ((read = source.read(data, 0, data.length)) != -1) {
                if (buffer.remaining() < read) {
                    // Reallocate if buffer is too small
                    buffer = MemoryUtil.memRealloc(buffer, buffer.capacity() * 2);
                }
                buffer.put(data, 0, read);
            }
            buffer.flip();
        }
        return buffer;
    }

    public static void freeFontBuffer() {
        if (fontBuffer != null) {
            memFree(fontBuffer);
            fontBuffer = null;
        }
    }
    
    */

        
        public void reportMemory(){
        
                long maxMemory = Runtime.getRuntime().maxMemory();
                long allocatedMemory = Runtime.getRuntime().totalMemory();
                long freeMemory = Runtime.getRuntime().freeMemory();
                
                System.out.println("max: " + maxMemory);
                System.out.println("allocated: " + allocatedMemory);
                System.out.println("free: " + freeMemory);
        }
        
        public void free(){ 
            
//            for (int i = 0; i < n; i++){
//            
//            glDeleteBuffers(GameShopShapeHash.getInstance().shapeHash.get(gsps[i]));
//      
//            glDeleteVertexArrays(GameShopVertexHash.getInstance().vertexHash.get(gsps[i]));
//            }
//            glDeleteBuffers(GameShopShapeHash.getInstance().shapeHash.get(gsp));
//      
//            glDeleteVertexArrays(GameShopVertexHash.getInstance().vertexHash.get(gsp));
        }
         
    

        
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
       // System.out.println(new App().getGreeting());
       //vertexShader
       App app = new App();
       app.run();
       //launch(app);
       
    }

//    @Override
//    public void process() {
//        ImGui.text("Hello World");
//        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
//    }

//    public void makeUI(GameShopUI ui){
//    
//          GameShopCharacterFontHash.getInstance().createFontStandard();
//          
//          GameShopUIComponent[] gsuiComponents = new GameShopUIComponent[1];
//          gsuiComponents[0] = new GameShopUIComponent("Button", new Vector2f(0, ui.uiPolyMesh.uiATMS.height - 86), new Vector2f(175, 85), ui.uiPolyMesh.uiATMS, new GameShopCharacterCursor(gsuiComponents[0]));
//          gsuiComponents[0].backgroundColor = new Vector4f(127,127,127,127);
//          gsuiComponents[0].textColor = new Vector4f(0,0,0,127);
//          
//          ui.uiPolyMesh.uiATMS.addGameShopComponents(0, gsuiComponents );
//          ui.uiPolyMesh.uiATMS.render();
//          //ui.uiPolyMesh.uiATMS.makeATMS();
//          System.out.println("HI");
//          //ui.uiPolyMesh.uiATMS.addGameShopLanguageProcessors(0, new GameShopLanguageProcessor[] {new GameShopLanguageProcessor("drawSquare(64, 64, 30, (127, 127, 127, 54))")});
//          //ui.uiPolyMesh.uiATMS.addGameShopLanguageProcessors(0, new GameShopLanguageProcessor[] {new GameShopLanguageProcessor("drawRectangle((15, 15), (30, 30), (127, 127, 127, 54))")});
//          //ui.uiPolyMesh.uiATMS.addGameShopLanguageProcessors(0, new GameShopLanguageProcessor[] {new GameShopLanguageProcessor("drawLine((30, 30), (45, 15), 1, (127, 127, 127, 54))")});
//          //ui.uiPolyMesh.uiATMS.addGameShopLanguageProcessors(0, new GameShopLanguageProcessor[] {new GameShopLanguageProcessor("drawPolyLine((45, 30, 0), (30, 30, 0), (30, 45, 0), (45,45,0), 3, (127, 127, 127, 54))")});
//          ui.uiPolyMesh.uiATMS.components[0].gscc = new GameShopCharacterCursor(ui.uiPolyMesh.uiATMS.components[0]);
////          GameShopCharacterUpperCaseA gscua = new GameShopCharacterUpperCaseA("", 10f, 'A', ui.uiPolyMesh.uiATMS.components[0].gscc);
//// 
////          ui.uiPolyMesh.uiATMS.components[0].gscc.setStartPosition(gscua);
////          gscua.drawCharacter();
////          ui.uiPolyMesh.uiATMS.addGameShopLanguageProcessors(0, gscua.gslp);
//          
//
//        ui.uiPolyMesh.uiATMS.components[0].setText("DIME");
//        //ui.uiPolyMesh.uiATMS.components[0].gscc.setStartPosition(ui.uiPolyMesh.uiATMS.components[0].gswp);
//        ui.uiPolyMesh.uiATMS.components[0].gswp.process();
//        
//        //ui.uiPolyMesh.uiATMS.components[0].gswp.process();
//        for (GameShopCharacter gsc: ui.uiPolyMesh.uiATMS.components[0].gswp.gsc){
//        
//            ui.uiPolyMesh.uiATMS.addGameShopLanguageProcessors(gsc.gslp.length - 1,  gsc.gslp);
//        }
//        
//        
////       
////       
//
//        
//
//
//ui.uiPolyMesh.uiATMS.process();
// for (GameShopCharacter gsc: ui.uiPolyMesh.uiATMS.components[0].gswp.gsc){
//        
//     System.out.println("CHARACTER " + gsc.character);
//            for (GameShopLanguageProcessor gslp: gsc.gslp){
//            
//                
//                System.out.println("GSLP " + gslp);
//            }
//            
//            for (Vector2f position: gsc.gsc.position){
//            
//                System.out.println("POSITION " + position);
//            }
//        }
//
//   }


    
    
}
